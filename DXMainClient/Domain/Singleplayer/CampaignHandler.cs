using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

using ClientCore;
using ClientCore.Enums;

using Rampastring.Tools;

namespace DTAClient.Domain.Singleplayer
{
    public class CampaignHandler
    {
        private CampaignHandler()
        {
            BattleParser parser = new BattleParser();

            parser.ParseBattles("INI/Battle.ini");
            parser.ParseBattles("INI/" + ClientConfiguration.Instance.BattleFSFileName);

            Missions = parser.GetMissions();
        }

        public List<Mission> Missions = new List<Mission>();
        private int selectedIndex = -1;

        private static CampaignHandler _instance;
        public static CampaignHandler Instance
        {
            get
            {
                if (_instance == null)
                    _instance = new CampaignHandler();
                return _instance;
            }
        }

        private static string[] DifficultyNames = new string[] { "Easy", "Medium", "Hard" };

        private static string[] DifficultyIniPaths = new string[]
        {
            "INI/Map Code/Difficulty Easy.ini",
            "INI/Map Code/Difficulty Medium.ini",
            "INI/Map Code/Difficulty Hard.ini"
        };

        /// <summary>
        /// Attempt to set the selected mission to a given index.
        /// </summary>
        /// <param name="i">Index to be selected.</param>
        /// <returns>True if successful. False if index out of range.</returns>
        public bool SelectMission(int i)
        {
            if (i >= Missions.Count || i < 0)
            {
                return false;
            }
            else
            {
                selectedIndex = i;
                return true;
            }
        }

        /// <summary>
        /// Attempt to set the selected mission to the given mission
        /// </summary>
        /// <param name="mission">Mission to be selected.</param>
        /// <returns>True if successful. False if mission not found.</returns>
        public bool SelectMission(Mission mission)
        {
            var i = Missions.IndexOf(mission);
            if (i < 0)
            {
                return false;
            }
            else
            {
                selectedIndex = i;
                return true;
            }
        }

        /// <summary>
        /// Retrieves the handler's selected mission.
        /// </summary>
        /// <returns>Mission object representing the selected mission. Null if nothing is selected.</returns>
        public Mission SelectedMission()
        {
            if (selectedIndex < 0)
            {
                return null;
            }
            return Missions[selectedIndex];
        }

        public void StageMissionFiles(Mission mission, int difficulty)
        {
            bool copyMapsToSpawnmapINI = ClientConfiguration.Instance.CopyMissionsToSpawnmapINI;

            Logger.Log("About to write spawn.ini.");
            using (var spawnStreamWriter = new StreamWriter(SafePath.CombineFilePath(ProgramConstants.GamePath, "spawn.ini")))
            {
                spawnStreamWriter.WriteLine("; Generated by DTA Client");
                spawnStreamWriter.WriteLine("[Settings]");
                if (copyMapsToSpawnmapINI)
                    spawnStreamWriter.WriteLine("Scenario=spawnmap.ini");
                else
                    spawnStreamWriter.WriteLine("Scenario=" + mission.Scenario);

                // No one wants to play missions on Fastest, so we'll change it to Faster
                if (UserINISettings.Instance.GameSpeed == 0)
                    UserINISettings.Instance.GameSpeed.Value = 1;

                spawnStreamWriter.WriteLine("CampaignID=" + mission.CampaignID);
                spawnStreamWriter.WriteLine("GameSpeed=" + UserINISettings.Instance.GameSpeed);

                if (ClientConfiguration.Instance.ClientGameType == ClientType.YR ||
                    ClientConfiguration.Instance.ClientGameType == ClientType.Ares)
                    spawnStreamWriter.WriteLine("Ra2Mode=" + !mission.RequiredAddon);
                else
                    spawnStreamWriter.WriteLine("Firestorm=" + mission.RequiredAddon);

                spawnStreamWriter.WriteLine("CustomLoadScreen=" + LoadingScreenController.GetLoadScreenName(mission.Side.ToString()));
                spawnStreamWriter.WriteLine("IsSinglePlayer=Yes");
                spawnStreamWriter.WriteLine("SidebarHack=" + ClientConfiguration.Instance.SidebarHack);
                spawnStreamWriter.WriteLine("Side=" + mission.Side);
                spawnStreamWriter.WriteLine("BuildOffAlly=" + mission.BuildOffAlly);

                UserINISettings.Instance.Difficulty.Value = difficulty;

                spawnStreamWriter.WriteLine("DifficultyModeHuman=" + (mission.PlayerAlwaysOnNormalDifficulty ? "1" : difficulty.ToString()));
                spawnStreamWriter.WriteLine("DifficultyModeComputer=" + Math.Abs(difficulty - 2));

                spawnStreamWriter.WriteLine();
                spawnStreamWriter.WriteLine();
                spawnStreamWriter.WriteLine();
            }

            var difficultyIni = new IniFile(SafePath.CombineFilePath(ProgramConstants.GamePath, DifficultyIniPaths[difficulty]));
            string difficultyName = DifficultyNames[difficulty];

            if (copyMapsToSpawnmapINI)
            {
                var mapIni = new IniFile(SafePath.CombineFilePath(ProgramConstants.GamePath, mission.Scenario));
                IniFile.ConsolidateIniFiles(mapIni, difficultyIni);
                mapIni.WriteIniFile(SafePath.CombineFilePath(ProgramConstants.GamePath, "spawnmap.ini"));
            }

            UserINISettings.Instance.Difficulty.Value = difficulty;
            UserINISettings.Instance.SaveSettings();
        }




    }
}
